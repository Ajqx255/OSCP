dig:
====
https://linuxize.com/post/how-to-use-dig-command-to-query-dns-in-linux/

# find IP of current machine
dig +short myip.opendns.com @resolver1.opendns.com
# Query Domain “A” Record 
dig <website or ip-address>
# Query Domain “A” Record with +short
dig <website or ip-address> +short
# Querying MX Record for Domain
dig <website or ip-address> MX
# Querying Start of Authority Record for Domain
dig <website or ip-address> SOA
# Querying TTL Record for Domain
dig <website or ip-address> TTL
# Querying ALL DNS Records Types
dig <website or ip-address>  ANY +noall +answer
# DNS Reverse Look-up
dig -x <website or ip-address>  

dig -h
Usage:  dig [@global-server] [domain] [q-type] [q-class] {q-opt}
            {global-d-opt} host [@local-server] {local-d-opt}
            [ host [@local-server] {local-d-opt} [...]]
Where:  domain	  is in the Domain Name System
        q-class  is one of (in,hs,ch,...) [default: in]
        q-type   is one of (a,any,mx,ns,soa,hinfo,axfr,txt,...) [default:a]
                 (Use ixfr=version for type ixfr)
        q-opt    is one of:
                 -4                  (use IPv4 query transport only)
                 -6                  (use IPv6 query transport only)
                 -b address[#port]   (bind to source address/port)
                 -c class            (specify query class)
                 -f filename         (batch mode)
                 -i                  (use IP6.INT for IPv6 reverse lookups)
                 -k keyfile          (specify tsig key file)
                 -m                  (enable memory usage debugging)
                 -p port             (specify port number)
                 -q name             (specify query name)
                 -t type             (specify query type)
                 -u                  (display times in usec instead of msec)
                 -x dot-notation     (shortcut for reverse lookups)
                 -y [hmac:]name:key  (specify named base64 tsig key)
        -h                           (print help and exit)
        -v                           (print version and exit)



nslookup:
=========
# Query Domain “A” Record 
nslookup <website>  
nslookup -type=a <website> 
# Querying NS (NameServer) Record for Domain
nslookup -type=ns <website>  
# Querying MX (MailExchange) Record for Domain
nslookup -type=mx <website> 
# Querying Start of Authority Record for Domain
nslookup -type=soa <website> 
# Querying ALL DNS Records Types
nslookup -type=any <website>  
# DNS Reverse Look-up
nslookup <ip-address>  
# Querying ALL TXT Records
nslookup -type=txt <website> 
nslookup -type=txt google.com
Server:		127.0.0.53
Address:	127.0.0.53#53

Non-authoritative answer:
google.com	text = "globalsign-smime-dv=CDYX+XFHUw2wml6/Gb8+59BsH31KzUr6c1l2BPvqKX8="
google.com	text = "facebook-domain-verification=22rm551cu4k0ab0bxsw536tlds4h95"
google.com	text = "docusign=05958488-4752-4ef2-95eb-aa7ba8a3bd0e"
google.com	text = "docusign=1b0a6754-49b1-4db5-8540-d2c12664b289"
google.com	text = "v=spf1 include:_spf.google.com ~all"

Authoritative answers can be found from:


dns recon:
==========
# dnsrecon Basic Usage 
dnsrecon -d <website>
# Scan a domain (-d example.com), use a dictionary to brute force hostnames (-D /usr/share/wordlists/dnsmap.txt), 
# do a standard scan (-t std), and save the output to a file (–xml dnsrecon.xml):

dnsrecon -d example.com -D /usr/share/wordlists/dnsmap.txt -t std --xml dnsrecon.xml
[*] Performing General Enumeration of Domain:example.com
[*] DNSSEC is configured for example.com
[*] DNSKEYs:

dnsrecon -h
usage: dnsrecon.py [-h] [-d DOMAIN] [-n NS_SERVER] [-r RANGE] [-D DICTIONARY]
                   [-f] [-t TYPE] [-a] [-s] [-g] [-b] [-k] [-w] [-z]
                   [--threads THREADS] [--lifetime LIFETIME] [--tcp] [--db DB]
                   [-x XML] [-c CSV] [-j JSON] [--iw] [-v]

optional arguments:
  -h, --help            show this help message and exit
  -d DOMAIN, --domain DOMAIN
                        Target domain.
  -n NS_SERVER, --name_server NS_SERVER
                        Domain server to use. If none is given, the SOA of the
                        target will be used.
  -r RANGE, --range RANGE
                        IP range for reverse lookup brute force in formats
                        (first-last) or in (range/bitmask).
  -D DICTIONARY, --dictionary DICTIONARY
                        Dictionary file of subdomain and hostnames to use for
                        brute force. Filter out of brute force domain lookup,
                        records that resolve to the wildcard defined IP
                        address when saving records.
  -f                    Filter out of brute force domain lookup, records that
                        resolve to the wildcard defined IP address when saving
                        records.
  -t TYPE, --type TYPE  Type of enumeration to perform.
  -a                    Perform AXFR with standard enumeration.
  -s                    Perform a reverse lookup of IPv4 ranges in the SPF
                        record with standard enumeration.
  -g                    Perform Google enumeration with standard enumeration.
  -b                    Perform Bing enumeration with standard enumeration.
  -k                    Perform crt.sh enumeration with standard enumeration.
  -w                    Perform deep whois record analysis and reverse lookup
                        of IP ranges found through Whois when doing a standard
                        enumeration.
  -z                    Performs a DNSSEC zone walk with standard enumeration.
  --threads THREADS     Number of threads to use in reverse lookups, forward
                        lookups, brute force and SRV record enumeration.
  --lifetime LIFETIME   Time to wait for a server to response to a query.
  --tcp                 Use TCP protocol to make queries.
  --db DB               SQLite 3 file to save found records.
  -x XML, --xml XML     XML file to save found records.
  -c CSV, --csv CSV     Comma separated value file.
  -j JSON, --json JSON  JSON file.
  --iw                  Continue brute forcing a domain even if a wildcard
                        records are discovered.
  -v                    Enable verbose


Host:
=====
# Query Public DNS records
host <website>
# Query NS (NameServer) records
host -t ns <website>
# Query MX (MailExchange) records
host -t mx 
# DNS transfer
host -t axfr <old-website> <new-website>
# In the case of a successful DNS transfer, 
# you should be able to get the full DNS zone for the given domain name we are using -l option, 
# which is another way to list all DNS records from a domain name—while testing the vulnerable site zonetransfer.me
host -l zonetransfer.me nsztm1.digi.ninja


DNSenum:
========
# avoiding reverse lookup (–noreverse) and saving the output into a file.xml (-o) while querying securitytrails.com
dnsenum --noreverse -o file.xml securitytrails.com
# use the Google search engine to “scrape” the results and get a list of subdomains.
# -p specifies the number of pages searched on Google that will be processed (by default 5 pages)
# -s option defines the maximum number of subdomains that will be extracted from Google (default is 15)
dnsenum --dnsserver ns3.p16.dynect.net github.com -p 10 -s 50


nmap:
=====
#  attempt to enumerate DNS hostnames by brute forcing popular subdomain names
nmap -T4 -p 53 --script dns-brute <website>


Fierce:
=======
fierce -dns <website>


whois:
======
whois  <website>

wget Clone a Webstie for off line viewing:
==========================================
# basic
wget -r -nH <website>
# Better!!!
wget -m -k -K -E -r -nH <website>
#-m,  --mirror			shortcut for -N -r -l inf --no-remove-listing
#-k,  --convert-links		make links in downloaded HTML or CSS point to local files
#-K,  --backup-converted	before converting file X, back up as X.orig
#-E,  --adjust-extension	save HTML/CSS documents with proper extensions
#-r,  --recursive		specify recursive download
#-nH, --no-host-directories	don't create host directories
